#!/usr/bin/env node
"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _index = require("../index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * This file is part of CoreWorker.
 *
 * CoreWorker is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CoreWorker is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016 TeeAge-Beatz UG (haftungsbeschrÃ¤nkt)
 */

/*
 * Runs a Script that increases a counter each millisecond and logs it
 * This example waits until Process is ready
 */
var websocketPath = _path2.default.join(__dirname, "Resources/Websocket");
var websocket = (0, _index.process)("node " + websocketPath, "Request was upgraded successfully to new Websocket");
var createWebsocket = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;

            /* eslint-enable */
            console.log("> Creating a websocket");
            _context.next = 4;
            return websocket.ready(1000);

          case 4:
            result = _context.sent;


            /*
             * If Promise gets resolved, a Result is returned containing ...
             *
             * condition === Regex                            --> { data: MatchedString }
             * condition === String || condition === Function --> { data: null }
             */
            console.log("> Websocket is ready to use, returning the following result: \n", result);
            console.log("> Shutdown process...");

            websocket.kill();
            _context.next = 14;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](0);

            console.log("Failed to create Websocket", _context.t0.message);
            websocket.kill();

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[0, 10]]);
  }));

  return function createWebsocket() {
    return _ref.apply(this, arguments);
  };
}();

createWebsocket();

//# sourceMappingURL=ready.js.map