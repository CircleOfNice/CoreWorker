[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Condition.type.js",
    "memberof": null,
    "longname": "src/Condition.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport RegExp from \"./RegExp.type\";\n\n/**\n * @typedef Condition\n */\nconst Condition = T.union([RegExp, T.String, T.Function], \"Condition\");\n\nCondition.dispatch = function(x) {\n    if(RegExp.is(x))     return RegExp;\n    if(T.String.is(x))   return T.String;\n    if(T.Function.is(x)) return T.Function;\n\n    throw new TypeError(`Cannot dispatch Condition: ${x}`);\n};\n\nexport default Condition;\n"
  },
  {
    "__docId__": 1,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dispatch",
    "memberof": "src/Condition.type.js",
    "longname": "src/Condition.type.js~dispatch",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/Condition.type.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 2,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Condition",
    "memberof": "src/Condition.type.js",
    "longname": "src/Condition.type.js~Condition",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Condition"
    }
  },
  {
    "__docId__": 3,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/DuplexStream.js",
    "memberof": null,
    "longname": "src/DuplexStream.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport { Transform } from \"stream\";\n\nexport default class DuplexStream extends Transform {\n    constructor(instance) {\n        super();\n\n        this.instance = instance;\n\n        this.instance.startStream();\n        this.instance.emitter.on(\"data\", ::this.push);\n    }\n\n    /**\n     * Pipes data into process's stdin\n     *\n     * @param {Buffer}   chunk    forwarded to stdin\n     * @param {String}   encoding of current chunk\n     * @param {Function} next     to finalize a chunk\n     */\n    _transform(chunk, encoding, next) {\n        this.instance.write(chunk);\n\n        next();\n    }\n\n    /**\n     * process.stdin ends with the readable stream\n     * to process the piped data\n     */\n    end() {\n        this.instance.end();\n    }\n}\n"
  },
  {
    "__docId__": 4,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "DuplexStream",
    "memberof": "src/DuplexStream.js",
    "longname": "src/DuplexStream.js~DuplexStream",
    "access": null,
    "export": true,
    "importPath": "core-worker/src/DuplexStream.js",
    "importStyle": "DuplexStream",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "interface": false,
    "extends": [
      "stream~Transform"
    ]
  },
  {
    "__docId__": 5,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/DuplexStream.js~DuplexStream",
    "longname": "src/DuplexStream.js~DuplexStream#constructor",
    "access": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "instance",
    "memberof": "src/DuplexStream.js~DuplexStream",
    "longname": "src/DuplexStream.js~DuplexStream#instance",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_transform",
    "memberof": "src/DuplexStream.js~DuplexStream",
    "longname": "src/DuplexStream.js~DuplexStream#_transform",
    "access": null,
    "description": "Pipes data into process's stdin",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Buffer"
        ],
        "spread": false,
        "optional": false,
        "name": "chunk",
        "description": "forwarded to stdin"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": "of current chunk"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "to finalize a chunk"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 8,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "end",
    "memberof": "src/DuplexStream.js~DuplexStream",
    "longname": "src/DuplexStream.js~DuplexStream#end",
    "access": null,
    "description": "process.stdin ends with the readable stream\nto process the piped data",
    "lineNumber": 48,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 9,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/DuplexStream.type.js",
    "memberof": null,
    "longname": "src/DuplexStream.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport NodeProcess from \"./NodeProcess.type\";\n\n/**\n * @typedef DuplexStream\n */\nexport default T.refinement(T.Object, function(x) {\n    return NodeProcess.is(x.instance);\n}, \"DuplexStream\");\n"
  },
  {
    "__docId__": 10,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "DuplexStream",
    "memberof": "src/DuplexStream.type.js",
    "longname": "src/DuplexStream.type.js~DuplexStream",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "DuplexStream"
    }
  },
  {
    "__docId__": 11,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ExitCode.type.js",
    "memberof": null,
    "longname": "src/ExitCode.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\n\n/**\n * @typedef ExitCode\n */\nexport default T.refinement(T.Number, x => x >= 0 && x < 256, \"ExitCode\");\n"
  },
  {
    "__docId__": 12,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ExitCode",
    "memberof": "src/ExitCode.type.js",
    "longname": "src/ExitCode.type.js~ExitCode",
    "access": null,
    "description": "",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "ExitCode"
    }
  },
  {
    "__docId__": 13,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ExitCodes.js",
    "memberof": null,
    "longname": "src/ExitCodes.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport ExitCodes from \"./ExitCodes.type\";\nimport MaybeExitCodes from \"./MaybeExitCodes.type\";\n\n/**\n * Creates Exit Codes\n *\n * @param  {MaybeExitCodes} maybeExitCodes that are valid\n * @return {ExitCodes}\n */\nExitCodes.create = T.func([MaybeExitCodes], ExitCodes, \"ExitCodes.create\").of(function(maybeExitCodes) {\n    return !maybeExitCodes ? [0] : [].concat(maybeExitCodes);\n});\n\nexport default ExitCodes;\n"
  },
  {
    "__docId__": 14,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/ExitCodes.type.js",
    "memberof": null,
    "longname": "src/ExitCodes.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport ExitCode from \"./ExitCode.type\";\n\n/**\n * @typedef ExitCodes\n */\nexport default T.list(ExitCode, \"ExitCodes\");\n"
  },
  {
    "__docId__": 15,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "ExitCodes",
    "memberof": "src/ExitCodes.type.js",
    "longname": "src/ExitCodes.type.js~ExitCodes",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "ExitCodes"
    }
  },
  {
    "__docId__": 16,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Instance.type.js",
    "memberof": null,
    "longname": "src/Instance.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport Result from \"./Result.type\";\n\n/**\n * @typedef Instance\n *\n * @param  {*}       x to be evaluated\n * @return {Boolean}\n */\nexport default T.refinement(T.Object, function(x) {\n    return (\n        T.Boolean.is(x.isRunning) &&\n        T.Boolean.is(x.fulfilled) &&\n        T.Boolean.is(x.isStreaming) &&\n        T.Array.is(x.output) &&\n        (Result.is(x.lastMatch) || T.Nil.is(x.lastMatch))\n    );\n}, \"Instance\");\n"
  },
  {
    "__docId__": 17,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Instance",
    "memberof": "src/Instance.type.js",
    "longname": "src/Instance.type.js~Instance",
    "access": null,
    "description": "",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "to be evaluated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Instance"
    }
  },
  {
    "__docId__": 18,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/MaybeExitCodes.type.js",
    "memberof": null,
    "longname": "src/MaybeExitCodes.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport ExitCode from \"./ExitCode.type\";\nimport ExitCodes from \"./ExitCodes.type\";\n\n/**\n * @typedef MaybeExitCodes\n */\nexport default T.maybe(T.union([ExitCode, ExitCodes]), \"MaybeExitCodes\");\n"
  },
  {
    "__docId__": 19,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "MaybeExitCodes",
    "memberof": "src/MaybeExitCodes.type.js",
    "longname": "src/MaybeExitCodes.type.js~MaybeExitCodes",
    "access": null,
    "description": "",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "MaybeExitCodes"
    }
  },
  {
    "__docId__": 20,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/NodeProcess.js",
    "memberof": null,
    "longname": "src/NodeProcess.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport Validator from \"./Validator\";\nimport NodeProcess from \"./NodeProcess.type\";\nimport Condition from \"./Condition.type\";\nimport T from \"tcomb\";\nimport { spawn } from \"child_process\";\nimport { assign, first, last } from \"lodash\";\nimport { EventEmitter } from \"events\";\nimport Result from \"./Result\";\nimport NotNil from \"./NotNil.type\";\nimport TimeoutError from \"./TimeoutError\";\nimport Q from \"q\";\nimport ExitCodes from \"./ExitCodes.type\";\n\n/**\n * Collects data and emits it afterwards\n *\n * @param  {String}   data received from process.output\n */\nNodeProcess.prototype.validate = T.func([T.String], T.Nil, \"nodeProcess.validate\").of(function(data) {\n    if(Result.is(this.instance.result) || !this.filter.validate(data)) return;\n\n    const result = this.filter.getResult(data);\n\n    assign(this.instance, {\n        result:    result,\n        fulfilled: true\n    });\n\n    this.emitter.emit(\"ready\", result);\n});\n\n/**\n * Stores new output\n *\n * @param  {String} data to be stored\n */\nNodeProcess.prototype.store = T.func([T.String], T.Nil, \"nodeProcess.store\").of(function(data) {\n    assign(this.instance, {\n        output: this.instance.output.concat([data])\n    });\n});\n\n/**\n * Starts the Process of current instance\n *\n * @param {Index?} timeout after that a timeout event gets emitted\n */\nNodeProcess.prototype.run = function(timeout = 0) {\n    if(this.isRunning()) return;\n\n    const process = spawn(this.command, this.commandArgs);\n\n    this.emitter.on(\"data\", data => this.store(data.toString()));\n    this.emitter.on(\"data\", data => this.validate(data.toString()));\n    process.stdout.on(\"data\", data => this.emitter.emit(\"data\", data.toString()));\n    process.stderr.on(\"data\", data => this.emitter.emit(\"data\", `<error> ${data}`));\n    process.on(\"close\", (code, signal) => this.instance.exitCodes.indexOf(code) > -1 || NotNil.is(signal) ? ::this.finish() : ::this.terminate(code));\n\n    assign(this.instance, process, {\n        isRunning: true,\n        kill:      process.kill\n    });\n    setTimeout(() => timeout > 0 ? this.emitter.emit(\"timeout\") : null, timeout);\n};\n\n/**\n * Streams data in process.stdin\n *\n * @param  {Buffer} chunk piped in stdin\n */\nNodeProcess.prototype.write = T.func([T.Object], T.Nil, \"nodeProcess.write\").of(function(chunk) {\n    this.instance.stdin.write(chunk);\n});\n\n/**\n * Signals the instance, that it is streaming\n */\nNodeProcess.prototype.startStream = T.func([], T.Nil, \"nodeProcess.startStream\").of(function() {\n    assign(this.instance, {\n        isStreaming: true\n    });\n});\n\n/**\n * Flushs all data piped into stdin\n */\nNodeProcess.prototype.end = T.func([], T.Nil, \"nodeProcess.end\").of(function() {\n    assign(this.instance, {\n        isStreaming: false\n    });\n    this.instance.stdin.end();\n});\n\n/**\n * Kills a running instance\n *\n * @return {Promise}\n */\nNodeProcess.prototype.kill = T.func([T.list(T.Number)], T.Object, \"nodeProcess.kill\").of(function(exitCodes) {\n    const deferred     = Q.defer();\n    const onNotRunning = () => {\n        deferred.reject(new Error(\"Instance isn't running\"));\n\n        return deferred.promise;\n    };\n\n    if(!this.isRunning) return onNotRunning();\n\n    this.onDeath(deferred, exitCodes);\n    this.instance.isStreaming && this.instance.stdin.pause(); // eslint-disable-line\n    this.instance.kill();\n\n    return deferred.promise;\n});\n\n/**\n * Emits an Error if process was closed unexpectedly\n *\n * @param {Index} code as exit status of the instance\n */\nNodeProcess.prototype.terminate = T.func([T.Number], T.Nil, \"nodeProcess.terminate\").of(function(code) {\n    assign(this.instance, { isRunning: false });\n    this.emitter.emit(\"failure\", new Error(`Process was closed unexpectedly. Code: ${code}`));\n});\n\n/**\n * Emits result after process was closed\n */\nNodeProcess.prototype.finish = T.func([], T.Nil, \"nodeProcess.finish\").of(function() {\n    assign(this.instance, { isRunning: false });\n    this.emitter.emit(\"death\", Result.create(this.instance.output.join(\"\")));\n});\n\n/**\n * Stores a callback, that gets called, when process ends\n *\n * @param {Promise} deferred executed after Process was closed\n */\nNodeProcess.prototype.onDeath = T.func([T.Object, ExitCodes], T.Nil, \"nodeProcess.onDeath\").of(function(deferred, exitCodes) {\n    assign(this.instance, { exitCodes: exitCodes });\n\n    this.emitter.on(\"death\", deferred.resolve);\n    this.emitter.on(\"failure\", deferred.reject);\n});\n\n/**\n * Stores a callback, that gets called, when process is ready\n *\n * @param  {Function} cb executed, when process is ready\n */\nNodeProcess.prototype.onReady = T.func([T.Function], T.Nil, \"nodeProcess.onReady\").of(function(cb) {\n    this.emitter.on(\"ready\", () => cb(this.instance));\n});\n\n/**\n * Stores a callback, that gets called, when process logs in stdout/stderr\n *\n * @param  {Function} cb executed on Output\n */\nNodeProcess.prototype.onData = T.func([T.Function], T.Nil, \"nodeProcess.onData\").of(function(cb) {\n    this.emitter.on(\"data\", cb);\n});\n\n/**\n * Stores a deferrable that will be rejected on an emitted timeout event\n *\n * @param {Promise} deferred to be rejected on timeout event\n */\nNodeProcess.prototype.onTimeout = T.func([T.Object], T.Nil, \"nodeProcess.onTimeout\").of(function(deferred) {\n    this.emitter.on(\"timeout\", () => deferred.reject(TimeoutError.create(last(this.instance.output))));\n});\n\n/**\n * Returns current state of Process\n *\n * @return {Boolean}\n */\nNodeProcess.prototype.isRunning = T.func([], T.Boolean, \"nodeProcess.isRunning\").of(function() {\n    return this.instance.isRunning;\n});\n\n/**\n * Returns if process is ready\n *\n * @return {Boolean}\n */\nNodeProcess.prototype.isReady = T.func([], T.Boolean, \"nodeProcess.isReady\").of(function() {\n    return this.instance.fulfilled;\n});\n\n/**\n * Returns last match\n *\n * @return {String?}\n */\nNodeProcess.prototype.lastMatch = T.func([], T.maybe(T.String), \"nodeProcess.lastMatch\").of(function() {\n    return this.instance.lastMatch;\n});\n\n/**\n * Creates a new Instance of NodeProcess\n *\n * @param  {String}      command   which will be executed\n * @param  {Condition}   condition to filter logs\n * @return {NodeProcess}\n */\nNodeProcess.create = T.func([T.String, Condition], NodeProcess, \"NodeProcess.create\").of(function(command, condition) {\n    const filter          = Validator.create(condition);\n    const emitter         = new EventEmitter();\n    const splittedCommand = command.split(\" \");\n\n    return {\n        emitter:     emitter,\n        command:     first(splittedCommand),\n        commandArgs: splittedCommand.slice(1),\n        filter:      filter,\n        instance:    {\n            exitCodes:   ExitCodes.create(),\n            isRunning:   false,\n            isStreaming: false,\n            output:      [],\n            lastMatch:   null,\n            fulfilled:   false\n        }\n    };\n});\n\nexport default NodeProcess;\n"
  },
  {
    "__docId__": 21,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "run",
    "memberof": "src/NodeProcess.js",
    "longname": "src/NodeProcess.js~run",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/NodeProcess.js",
    "importStyle": null,
    "description": "Starts the Process of current instance",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Index?"
        ],
        "spread": false,
        "optional": false,
        "name": "timeout",
        "description": "after that a timeout event gets emitted"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/NodeProcess.type.js",
    "memberof": null,
    "longname": "src/NodeProcess.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport Validator from \"./Validator.type\";\nimport Instance from \"./Instance.type\";\n\n/**\n * @typedef NodeProcess\n */\nexport default T.struct({\n    emitter:     T.Object,\n    instance:    Instance,\n    filter:      Validator,\n    command:     T.String,\n    commandArgs: T.list(T.String)\n}, \"NodeProcess\");\n"
  },
  {
    "__docId__": 23,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "NodeProcess",
    "memberof": "src/NodeProcess.type.js",
    "longname": "src/NodeProcess.type.js~NodeProcess",
    "access": null,
    "description": "",
    "lineNumber": 26,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "NodeProcess"
    }
  },
  {
    "__docId__": 24,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/NotNil.type.js",
    "memberof": null,
    "longname": "src/NotNil.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\n\n/**\n * @typedef {NotNil}\n * @param   {*}     x value\n */\nexport default T.refinement(T.Any, x => !T.Nil.is(x), \"NotNil\");\n"
  },
  {
    "__docId__": 25,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": null,
    "memberof": "src/NotNil.type.js",
    "longname": "src/NotNil.type.js~null",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "value"
      }
    ],
    "type": {
      "types": [
        "NotNil"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Process.js",
    "memberof": null,
    "longname": "src/Process.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport Q from \"q\";\nimport Process from \"./Process.type\";\nimport NodeProcess from \"./NodeProcess\";\nimport DuplexStream from \"./DuplexStream\";\nimport TDuplexStream from \"./DuplexStream.type\";\nimport defaults from \"set-default-value\";\nimport T from \"tcomb\";\nimport Condition from \"./Condition.type\";\nimport assert from \"assert\";\nimport ExitCodes from \"./ExitCodes\";\nimport MaybeExitCodes from \"./MaybeExitCodes.type\";\n\n/**\n * Awaits the death of a (running) process\n *\n * @param  {Index?}         maybeTimeout   until process should have died\n * @param  {MaybeExitCodes} maybeExitCodes that are valid\n * @return {Promise}\n */\nProcess.prototype.death = function(maybeTimeout, maybeExitCodes) {\n    const timeout   = T.Number(defaults(maybeTimeout).to(0));\n    const exitCodes = ExitCodes.create(maybeExitCodes);\n    const deferred  = Q.defer();\n\n    this.instance.onDeath(deferred, exitCodes);\n    this.instance.onTimeout(deferred);\n    this.instance.run(timeout);\n\n    return deferred.promise;\n};\n\n/**\n * Awaits the initialized process\n *\n * @param  {Index}   timeout until instance should be ready\n * @return {Promise}\n */\nProcess.prototype.ready = T.func([T.Number], T.Object, \"process.ready\").of(function(timeout) {\n    if(this.instance.isRunning() && this.instance.isReady()) return this.instance.lastMatch();\n\n    const deferred = Q.defer();\n\n    this.instance.onReady(deferred.resolve);\n    this.instance.onTimeout(deferred);\n    this.instance.run(timeout);\n\n    return deferred.promise;\n});\n\n/**\n * Starts a new DuplexStream, listening on DataOutput of a new Process-Instance\n *\n * @return {DuplexStream}\n */\nProcess.prototype.stream = T.func([], TDuplexStream, \"process.stream\").of(function() {\n    assert(!this.instance.isRunning(), \"Can't use stream after process initialization\");\n\n    this.instance.run();\n\n    return new DuplexStream(this.instance);\n});\n\n/**\n * Kills a running Process\n *\n * @param {MaybeExitCodes} maybeExitCodes that are valid\n */\nProcess.prototype.kill = T.func([MaybeExitCodes], T.Object, \"process.kill\").of(function(maybeExitCodes) {\n    const exitCodes = ExitCodes.create(maybeExitCodes);\n\n    return this.instance.kill(exitCodes);\n});\n\n/**\n * Creates a new Process\n *\n * @param  {String}    command   executed in Process\n * @param  {Condition} condition as filter\n * @return {Process}\n */\nProcess.create = function(command, condition = \"\") {\n    return Process({\n        instance: NodeProcess.create(T.String(command), Condition(condition))\n    });\n};\n\nexport default Process;\n"
  },
  {
    "__docId__": 27,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "death",
    "memberof": "src/Process.js",
    "longname": "src/Process.js~death",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/Process.js",
    "importStyle": null,
    "description": "Awaits the death of a (running) process",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "Index?"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeTimeout",
        "description": "until process should have died"
      },
      {
        "nullable": null,
        "types": [
          "MaybeExitCodes"
        ],
        "spread": false,
        "optional": false,
        "name": "maybeExitCodes",
        "description": "that are valid"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "src/Process.js",
    "longname": "src/Process.js~create",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/Process.js",
    "importStyle": null,
    "description": "Creates a new Process",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "executed in Process"
      },
      {
        "nullable": null,
        "types": [
          "Condition"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "as filter"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Process"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Process.type.js",
    "memberof": null,
    "longname": "src/Process.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport NodeProcess from \"./NodeProcess\";\n\n/**\n * @typedef Process\n */\nexport default T.struct({\n    instance: NodeProcess\n}, \"ProcessManager\");\n"
  },
  {
    "__docId__": 30,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Process",
    "memberof": "src/Process.type.js",
    "longname": "src/Process.type.js~Process",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Process"
    }
  },
  {
    "__docId__": 31,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/RegExp.type.js",
    "memberof": null,
    "longname": "src/RegExp.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\n\n/**\n * @typedef RegExp\n *\n * @param  {*}       x to be evaluated\n * @return {Boolean}\n */\nexport default T.refinement(T.Object, function(x) {\n    return x instanceof RegExp;\n}, \"RegExp\");\n"
  },
  {
    "__docId__": 32,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "memberof": "src/RegExp.type.js",
    "longname": "src/RegExp.type.js~RegExp",
    "access": null,
    "description": "",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "to be evaluated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "RegExp"
    }
  },
  {
    "__docId__": 33,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Result.js",
    "memberof": null,
    "longname": "src/Result.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport Result from \"./Result.type\";\n\n/**\n * Creates a new Result\n *\n * @param  {String?} match stored in result\n * @return {Result}\n */\nResult.create = T.func([T.maybe(T.String)], Result, \"Result.create\").of(function(match) {\n    return {\n        data: match\n    };\n});\n\nexport default Result;\n"
  },
  {
    "__docId__": 34,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Result.type.js",
    "memberof": null,
    "longname": "src/Result.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\n\n/**\n * @typedef Result\n */\nexport default T.struct({\n    data: T.maybe(T.String)\n}, \"Result\");\n"
  },
  {
    "__docId__": 35,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Result",
    "memberof": "src/Result.type.js",
    "longname": "src/Result.type.js~Result",
    "access": null,
    "description": "",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Result"
    }
  },
  {
    "__docId__": 36,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/TimeoutError.js",
    "memberof": null,
    "longname": "src/TimeoutError.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport TimeoutError from \"./TimeoutError.type\";\n\n/**\n * Creates a new TimeoutError\n *\n * @param  {String}         output   output line to be displayed in error message\n * @return {TimeoutError}\n */\nTimeoutError.create = T.func([T.maybe(T.String)], TimeoutError, \"TimeoutError.create\").of(function(output) {\n    return new Error(T.Nil.is(output) || !output ? \"Timeout exceeded.\" : `Timeout exceeded. Last process output is: ${output}`);\n});\n\nexport default TimeoutError;\n"
  },
  {
    "__docId__": 37,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/TimeoutError.type.js",
    "memberof": null,
    "longname": "src/TimeoutError.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\n\nexport default T.subtype(T.Error, () => true, \"TimeoutError\");\n"
  },
  {
    "__docId__": 38,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Validator.js",
    "memberof": null,
    "longname": "src/Validator.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport Validator from \"./Validator.type\";\nimport RegExp from \"./RegExp.type\";\nimport Condition from \"./Condition.type\";\nimport { assign, first } from \"lodash\";\nimport Result from \"./Result\";\n\n/**\n * Returns matched String\n *\n * @param  {String} data containing matched String\n * @return {Result}\n */\nValidator.prototype.getResult = T.func([T.String], Result, \"validator.getResult\").of(function(match) {\n    return Result.create(RegExp.is(this.filter) ? first(this.filter.exec(match)) : null);\n});\n\n/**\n * Creates a new Validator with given condition\n *\n * @param  {*}         condition for validation\n * @return {Validator}\n */\nValidator.create = T.func([Condition], Validator, \"Validator.create\").of(function(condition) {\n    const validator = { filter: condition };\n\n    if(RegExp.is(condition))   return assign(validator, { validate: value => condition.test(value) });\n    if(T.String.is(condition)) return assign(validator, { validate: value => value.indexOf(condition) !== -1 });\n\n    return assign(validator, { validate: condition });\n});\n\nexport default Validator;\n"
  },
  {
    "__docId__": 39,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/Validator.type.js",
    "memberof": null,
    "longname": "src/Validator.type.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport T from \"tcomb\";\nimport Condition from \"./Condition.type\";\n\n/**\n * @typedef Validator\n */\nexport default T.struct({\n    filter:   Condition,\n    validate: T.Function\n}, \"Validator\");\n"
  },
  {
    "__docId__": 40,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "Validator",
    "memberof": "src/Validator.type.js",
    "longname": "src/Validator.type.js~Validator",
    "access": null,
    "description": "",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "Validator"
    }
  },
  {
    "__docId__": 41,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/CoreWorkerTest.js",
    "memberof": null,
    "longname": "src/__tests__/CoreWorkerTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport { process } from \"../index\";\nimport assert from \"assert\";\nimport Result from \"../Result.type\";\nimport T from \"tcomb\";\nimport { Writable } from \"stream\";\nimport path from \"path\";\n\nconst counterScript  = path.join(__dirname, \"/Scripts/CounterScript.js\");\nconst stdinLogger    = path.join(__dirname, \"/Scripts/StdinLogger.js\");\nconst failScript     = path.join(__dirname, \"/Scripts/FailScript.js\");\nconst exitCodeScript = path.join(__dirname, \"/Scripts/ExitCodeScript.js\");\nconst killScript     = path.join(__dirname, \"/Scripts/KillScript.js\");\n\ndescribe(\"CoreWorker\", function() { //eslint-disable-line\n    it(\"executes an application and waits until it is ready\", async function(done) {\n        this.timeout(5000);\n        const counter = process(`node ${counterScript}`, \"Log No. 10\");\n\n        try {\n            const result = await counter.ready(2000);\n\n            assert.deepStrictEqual(\n                result.output.join(\"\"),\n                \"Log No. 1\\n\" +\n                \"Log No. 2\\n\" +\n                \"Log No. 3\\n\" +\n                \"Log No. 4\\n\" +\n                \"Log No. 5\\n\" +\n                \"Log No. 6\\n\" +\n                \"Log No. 7\\n\" +\n                \"Log No. 8\\n\" +\n                \"Log No. 9\\n\" +\n                \"Log No. 10\\n\"\n            );\n\n            assert.equal(result.isRunning, true, \"Expected process to be running\");\n            assert(T.Number.is(result.pid) && result.pid > 0, \"Should have a pid\");\n\n            assert.equal(\n                (await counter.kill()).data.indexOf(\n                    \"Log No. 1\\n\" +\n                    \"Log No. 2\\n\" +\n                    \"Log No. 3\\n\" +\n                    \"Log No. 4\\n\" +\n                    \"Log No. 5\\n\" +\n                    \"Log No. 6\\n\" +\n                    \"Log No. 7\\n\" +\n                    \"Log No. 8\\n\" +\n                    \"Log No. 9\\n\" +\n                    \"Log No. 10\\n\" +\n                    \"Log No. 11\\n\"\n                ),\n                0\n            );\n            done();\n        } catch(err) {\n            done(err);\n        }\n    });\n\n    it(\"executes an application and waits until it is ready\", async function(done) {\n        const counter = process(`node ${counterScript}`, /Log\\ No\\.\\ 5/);\n\n        try {\n            const result = await counter.ready(2000); // eslint-disable-line\n\n            assert.deepStrictEqual(result.output, [\n                \"Log No. 1\\n\",\n                \"Log No. 2\\n\",\n                \"Log No. 3\\n\",\n                \"Log No. 4\\n\",\n                \"Log No. 5\\n\"\n            ]);\n\n            assert.equal(result.isRunning, true, \"Expected process to be running\");\n            assert(T.Number.is(result.pid) && result.pid > 0, \"Should have a pid\");\n\n            await counter.kill();\n            done();\n        } catch(err) {\n            done(err);\n        }\n    });\n\n    it(\"executes an application, waits until it is ready, but exceeds given timeout\", async function(done) {\n        const counter = process(`node ${counterScript}`, \"Log No. 10\");\n\n        try {\n            const result = await counter.ready(10);\n\n            assert.deepStrictEqual(result, Result({ data: null }), \"Result should contain null\");\n            done(new Error(\"This shouldn't finish.\"));\n        } catch(err) {\n            assert.equal(err.message, \"Timeout exceeded.\", \"Timeout Error should be thrown\");\n\n            await counter.kill();\n            done();\n        }\n    });\n\n    it(\"executes an application and waits its death\", async function(done) {\n        const counter = process(`node ${counterScript}`, /Log\\ No\\.\\ 10/);\n\n        try {\n            const result = await counter.death();\n\n            result.data\n                .slice(0, -1)\n                .split(\"\\n\")\n                .forEach(function(row, iterator) {\n                    assert(row === `Log No. ${iterator + 1}`, `Wrong output: ${row}, expected:\\n Log No. ${iterator + 1}`);\n                });\n            done();\n        } catch(err) {\n            done(err);\n        }\n    });\n\n    it(\"executes an application and waits its death with a spedified timeout\", async function(done) {\n        const counter = process(`node ${counterScript}`, /Log\\ No\\.\\ 10/);\n\n        try {\n            const result = await counter.death(500);\n\n            result.data\n                .slice(0, -1)\n                .split(\"\\n\")\n                .forEach(function(row, iterator) {\n                    assert(row === `Log No. ${iterator + 1}`, `Wrong output: ${row}, expected:\\n Log No. ${iterator + 1}`);\n                });\n            done();\n        } catch(err) {\n            done(err);\n        }\n    });\n\n    it(\"executes an application, waits its death, but exceeds given timeout\", async function(done) {\n        const counter = process(`node ${counterScript}`, /Log\\ No\\.\\ 10/);\n\n        try {\n            await counter.death(10);\n            done(new Error(\"Shouldn't resolve here\"));\n        } catch(err) {\n            assert.equal(err.message, \"Timeout exceeded.\", \"Timeout Error should be thrown\");\n\n            await counter.kill();\n            done();\n        }\n    });\n\n    it(\"executes an application and handles it as a stream\", function(done) {\n        const inputLogger = process(`node ${stdinLogger}`, \"\");\n        const writable    = Writable();\n        const stream      = inputLogger.stream();\n\n        writable.write = function(chunk) {\n            assert.equal(chunk, \"Hello\\n\");\n            inputLogger.kill().then(() => done()).catch(done);\n        };\n\n        stream.pipe(writable);\n        stream.write(\"Hello\");\n    });\n\n    it(\"executes an application, but terminates unexpectedly\", async function(done) {\n        const failProcess = process(`node ${failScript}`);\n\n        try {\n            await failProcess.death(1000);\n            done(new Error(\"Shouldn't resolve here\"));\n        } catch(err) {\n            assert.equal(err.message, \"Process was closed unexpectedly. Code: 1\", \"Message should be closing code with 1\");\n            done();\n        }\n    });\n\n    it(\"executes an application, awaits its death and terminates with valid exit code\", async function(done) {\n        try {\n            const validExitCodeProcess = process(`node ${exitCodeScript}`);\n            const result               = await validExitCodeProcess.death(1000, 128);\n\n            assert.equal(result.data, \"Process exited with code 100\");\n            done();\n        } catch(err) {\n            done(err);\n        }\n    });\n\n    it(\"executes an application and kills it\", async function(done) {\n        try {\n            const liveProcess = process(`node ${killScript}`, /Kill me/);\n\n            await liveProcess.ready(1000);\n            await liveProcess.kill();\n            done();\n        } catch(err) {\n            assert.equal(err.message, \"Process was closed unexpectedly. Code: 137\");\n            done();\n        }\n    });\n\n    it(\"executes an application, kills it and terminates with valid exit code\", async function(done) {\n        try {\n            const liveProcess = process(`node ${killScript}`, /Kill me/);\n\n            await liveProcess.ready(1000);\n\n            const result = await liveProcess.kill([137]);\n\n            assert.equal(result.data, \"Kill me\");\n            done();\n        } catch(err) {\n            done(err);\n        }\n    });\n});\n"
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "counterScript",
    "memberof": "src/__tests__/CoreWorkerTest.js",
    "longname": "src/__tests__/CoreWorkerTest.js~counterScript",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/CoreWorkerTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "stdinLogger",
    "memberof": "src/__tests__/CoreWorkerTest.js",
    "longname": "src/__tests__/CoreWorkerTest.js~stdinLogger",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/CoreWorkerTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "failScript",
    "memberof": "src/__tests__/CoreWorkerTest.js",
    "longname": "src/__tests__/CoreWorkerTest.js~failScript",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/CoreWorkerTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "exitCodeScript",
    "memberof": "src/__tests__/CoreWorkerTest.js",
    "longname": "src/__tests__/CoreWorkerTest.js~exitCodeScript",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/CoreWorkerTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "killScript",
    "memberof": "src/__tests__/CoreWorkerTest.js",
    "longname": "src/__tests__/CoreWorkerTest.js~killScript",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/CoreWorkerTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/DuplexStreamTest.js",
    "memberof": null,
    "longname": "src/__tests__/DuplexStreamTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport DuplexStream from \"../DuplexStream\";\nimport { Writable } from \"stream\";\nimport sinon from \"sinon\";\nimport assert from \"assert\";\nimport { set } from \"lodash\";\n\nconst getInstance = function(callbacks, spy) {\n    return {\n        emitter: {\n            on: (name, cb) => set(callbacks, name, cb)\n        },\n        startStream: () => {},\n        write:       chunk => spy(chunk),\n        end:         () => {}\n    };\n};\n\nconst prepareTest = function() {\n    const callbacks = {};\n    const stdinSpy  = sinon.spy();\n    const writeSpy  = sinon.spy();\n    const instance  = new DuplexStream(getInstance(callbacks, stdinSpy));\n    const writeable = new Writable();\n\n    writeable.write = data => writeSpy(data);\n    instance.pipe(writeable);\n\n    return {\n        spies: {\n            stdin: stdinSpy,\n            write: writeSpy\n        },\n        callbacks: callbacks,\n        instance:  instance\n    };\n};\n\ndescribe(\"DuplexStream\", function() {\n    it(\"Writestream Test\", function() {\n        const metrics = prepareTest();\n\n        metrics.instance.write(\"Hello\");\n        assert(metrics.spies.stdin.calledWith(new Buffer(\"Hello\")), \"Should be called with Hello\");\n        metrics.instance.write(\"Goodbye\");\n        assert(metrics.spies.stdin.calledWith(new Buffer(\"Goodbye\")), \"Should be called with Goodbye\");\n\n        metrics.instance.end();\n    });\n\n    it(\"ReadStream Test\", function() {\n        const metrics = prepareTest();\n\n        metrics.callbacks.data(\"First call\");\n        assert(metrics.spies.write.calledWith(new Buffer(\"First call\")), \"Should be called with 'First Call'\");\n\n        metrics.callbacks.data(\"Second call\");\n        assert(metrics.spies.write.calledWith(new Buffer(\"Second call\")), \"Should be called with 'Second Call'\");\n\n        metrics.instance.end();\n    });\n});\n"
  },
  {
    "__docId__": 48,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getInstance",
    "memberof": "src/__tests__/DuplexStreamTest.js",
    "longname": "src/__tests__/DuplexStreamTest.js~getInstance",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/DuplexStreamTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "callbacks",
        "types": [
          "*"
        ]
      },
      {
        "name": "spy",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "prepareTest",
    "memberof": "src/__tests__/DuplexStreamTest.js",
    "longname": "src/__tests__/DuplexStreamTest.js~prepareTest",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/DuplexStreamTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/ExitCodesTest.js",
    "memberof": null,
    "longname": "src/__tests__/ExitCodesTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport ExitCodes from \"../ExitCodes\";\nimport assert from \"assert\";\n\ndescribe(\"ExitCodes\", function() {\n    it(\"gets undefined and creates Exit Codes\", function() {\n        const exitCodes = ExitCodes.create(undefined); //eslint-disable-line\n\n        assert.deepEqual(exitCodes, [0]);\n    });\n\n    it(\"gets null and creates Exit Codes\", function() {\n        const exitCodes = ExitCodes.create(null); //eslint-disable-line\n\n        assert.deepEqual(exitCodes, [0]);\n    });\n\n    it(\"gets single value and creates Exit Codes\", function() {\n        const exitCodes = ExitCodes.create(100);\n\n        assert.deepEqual(exitCodes, [100]);\n    });\n\n    it(\"gets list and creates Exit Codes\", function() {\n        const exitCodes = ExitCodes.create([100, 101]);\n\n        assert.deepEqual(exitCodes, [100, 101]);\n    });\n});\n"
  },
  {
    "__docId__": 51,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/NodeProcessTest.js",
    "memberof": null,
    "longname": "src/__tests__/NodeProcessTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n/* eslint max-statements: [2, 12] */\nimport sinon from \"sinon\";\nimport assert from \"assert\";\nimport { keys, set } from \"lodash\";\nimport { EventEmitter } from \"events\";\nimport T from \"tcomb\";\nimport NodeProcess from \"../NodeProcess\";\nimport Result from \"../Result\";\nimport ChildProcess from \"child_process\";\n\nconst commandSpy   = sinon.spy();\nconst callbacks    = {};\nconst setCallbacks = (name, cb) => set(callbacks, name, cb);\n\nconst spawn = function(command, commandArgs) {\n    commandSpy(command, commandArgs);\n\n    return {\n        stdout: {\n            on: (name, cb) => setCallbacks(\"stdout\", cb)\n        },\n        stderr: {\n            on: (name, cb) => setCallbacks(\"stderr\", cb)\n        },\n        on:   setCallbacks,\n        kill: () => callbacks.close(0)\n    };\n};\n\ndescribe(\"NodeProcess\", function() {\n    before(function() {\n        sinon.stub(ChildProcess, \"spawn\", spawn);\n    });\n\n    after(function() {\n        ChildProcess.spawn.restore();\n    });\n\n    it(\"creates a new nodeProcess\", function() {\n        const nodeProcess = NodeProcess.create(\"node Test.js\", \"Started Successfully.\");\n\n        assert.deepStrictEqual(keys(nodeProcess.instance), [\"exitCodes\", \"isRunning\", \"isStreaming\", \"output\", \"lastMatch\", \"fulfilled\"], \"No Instance of child_process should be set\");\n        assert(!nodeProcess.instance.isRunning, \"Process shouldn't run after create\");\n        assert.equal(nodeProcess.command, \"node\", \"Command should be stored in Process\");\n        assert.equal(nodeProcess.commandArgs, \"Test.js\", \"CommandArgs should be stored in Process\");\n        assert(nodeProcess.filter.validate(\"Started Successfully.\"), \"Filter should be set on given String\");\n        assert(nodeProcess.emitter instanceof EventEmitter, \"emitter should be an instance of EventEmitter\");\n    });\n\n    it(\"starts a nodeProcess and waits until it is ready(stdout)\", function() {\n        const nodeProcess = NodeProcess.create(\"node Test.js\", \"Started Successfully.\");\n        const matchSpy    = sinon.spy();\n\n        nodeProcess.onReady(match => matchSpy(match));\n        nodeProcess.run();\n\n        assert(commandSpy.calledWith(\"node\", [\"Test.js\"]), `commandSpy was called with wrong args: \\n ${commandSpy.lastCall.args}`);\n        assert.deepStrictEqual(keys(callbacks), [\"stdout\", \"stderr\", \"close\"], \"Callbacks should be set after process.run\");\n\n        callbacks.stdout(\"Started Successfully.\");\n        assert(matchSpy.calledOnce, \"matchSpy wasn't called once\");\n    });\n\n    it(\"starts a nodeProcess and waits until it is ready(stderr)\", function() {\n        callbacks.stderr  = null;\n        const nodeProcess = NodeProcess.create(\"node Test.js\", \"Huge Mistake\");\n        const matchSpy    = sinon.spy();\n\n        nodeProcess.onReady(match => matchSpy(match));\n        nodeProcess.run();\n\n        assert(T.Function.is(callbacks.stderr), \"Stderr should be set again\");\n\n        callbacks.stderr(\"Huge Mistake\");\n\n        assert(matchSpy.calledOnce, \"matchSpy wasn't called once\");\n    });\n\n    it(\"starts a nodeProcess and waits until it is closed\", function() { //eslint-disable-line\n        callbacks.close   = null;\n        const nodeProcess = NodeProcess.create(\"node Test.js\", \"Not necessary\");\n        const mockPromise = {\n            resolve: sinon.spy(),\n            reject:  sinon.spy()\n        };\n\n        nodeProcess.onDeath(mockPromise, [0]);\n        nodeProcess.run();\n\n        assert(T.Function.is(callbacks.close), \"Close shoud be set again\");\n        callbacks.stdout(\"Yes\");\n\n        callbacks.close(0);\n        assert(mockPromise.resolve.calledWith(Result({ data: \"Yes\" })), `closeSpy was called with wrong args: \\n ${mockPromise.resolve.args}`);\n\n        callbacks.close(1);\n        assert(mockPromise.reject.calledWith(new Error(\"Bla\")), `closeSpy was called with wrong args: \\n ${mockPromise.reject.args}`);\n    });\n});\n"
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "commandSpy",
    "memberof": "src/__tests__/NodeProcessTest.js",
    "longname": "src/__tests__/NodeProcessTest.js~commandSpy",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/NodeProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "callbacks",
    "memberof": "src/__tests__/NodeProcessTest.js",
    "longname": "src/__tests__/NodeProcessTest.js~callbacks",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/NodeProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "setCallbacks",
    "memberof": "src/__tests__/NodeProcessTest.js",
    "longname": "src/__tests__/NodeProcessTest.js~setCallbacks",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/NodeProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "spawn",
    "memberof": "src/__tests__/NodeProcessTest.js",
    "longname": "src/__tests__/NodeProcessTest.js~spawn",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/NodeProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "commandArgs",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/ProcessTest.js",
    "memberof": null,
    "longname": "src/__tests__/ProcessTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport sinon from \"sinon\";\nimport assert from \"assert\";\nimport Process from \"../Process\";\nimport NodeProcess from \"../NodeProcess\";\nimport { assign } from \"lodash\";\nimport TimeoutError from \"../TimeoutError\";\nimport { Writable } from \"stream\";\n\nconst test = (function() {\n    const parameters = {\n        promises: [],\n        resolve:  null,\n        spies:    {\n            kill:   sinon.spy(),\n            stdin:  sinon.spy(),\n            stdout: sinon.spy()\n        }\n    };\n\n    return {\n        all:   () => parameters,\n        spies: () => parameters.spies,\n        set:   params => assign(parameters, params)\n    };\n}());\n\nconst write = chunk => test.spies().stdin(chunk);\n\nconst run = function() {\n    assign(this.instance, {\n        isRunning: true\n    });\n    const promises = test.all().promises;\n\n    setTimeout(function() {\n        const resolvedValue = test.all().resolve;\n\n        promises.forEach(resolve => resolve(resolvedValue));\n        assign(this.instance, {\n            isRunning: false,\n            fulfilled: true,\n            lastMatch: resolvedValue\n        });\n\n        test.set({ promises: [] });\n    }.bind(this), 3);\n};\n\nconst runTimingout = function() {\n    assign(this.instance, {\n        isRunning: true\n    });\n    setTimeout(function() {\n        this.emitter.emit(\"timeout\");\n    }.bind(this), 2);\n};\n\nconst runWithConsoleOutput = function() {\n    assign(this.instance, {\n        isRunning: true\n    });\n    this.emitter.on(\"data\", data => this.store(data.toString()));\n    this.emitter.on(\"data\", data => this.validate(data.toString()));\n    this.emitter.emit(\"data\", \"Foo\");\n    this.emitter.emit(\"data\", \"Bar\");\n    setTimeout(function() {\n        this.emitter.emit(\"timeout\");\n    }.bind(this), 2);\n};\n\nconst onReady = function(resolve) {\n    test.set({\n        promises: test.all().promises.concat(resolve)\n    });\n};\n\nconst onDeath = function(deferred) {\n    test.set({\n        promises: test.all().promises.concat(deferred.resolve)\n    });\n};\n\nconst kill = function(reason) {\n    test.spies().kill(reason);\n};\n\nconst restoreAndSet = function(toRestore, toSet, functionName, stubFunction) {\n    toRestore.restore();\n    sinon.stub(toSet, functionName, stubFunction);\n};\n\ndescribe(\"Process\", function() {\n    before(function() {\n        sinon.stub(NodeProcess.prototype, \"run\", run);\n        sinon.stub(NodeProcess.prototype, \"write\", write);\n        sinon.stub(NodeProcess.prototype, \"onReady\", onReady);\n        sinon.stub(NodeProcess.prototype, \"onDeath\", onDeath);\n        sinon.stub(NodeProcess.prototype, \"kill\", kill);\n        this.clock = sinon.useFakeTimers();\n    });\n\n    after(function() {\n        NodeProcess.prototype.run.restore();\n        NodeProcess.prototype.onReady.restore();\n        NodeProcess.prototype.onDeath.restore();\n        NodeProcess.prototype.kill.restore();\n        NodeProcess.prototype.write.restore();\n        this.clock.restore();\n    });\n\n    it(\"creates a new Instance\", function() {\n        const process = Process.create(\"node Test.js\", \"TestString\");\n\n        assert(process.instance instanceof NodeProcess, \"Instance should be instanceof NodeProcess\");\n        assert(!process.instance.isRunning(), \"Instance shouldn't run after create\");\n        assert(!process.instance.isReady(), \"Instanc shouldn't be ready after create\");\n    });\n\n    it(\"runs a new Instance and waits until it is ready\", function(done) {\n        test.set({ resolve: \"TestString\" });\n\n        const instance = Process.create(\"node Test.js\", \"TestString\");\n\n        instance.ready(10).then(function(match) {\n            assert.equal(match, \"TestString\", \"TestString should be resolved\");\n            done();\n        }).catch(done);\n\n        this.clock.tick(3);\n    });\n\n    it(\"runs a new Instance and waits until it is ready exceeding given timeout\", function(done) {\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", runTimingout);\n\n        const instance = Process.create(\"node Test.js\", \"TestString\");\n\n        instance.ready(3).then(function() {\n            done(new Error(\"Promise shouldn't get resolved\"));\n        }).catch(function(err) {\n            assert(TimeoutError.is(err), \"Error is not an instance of TimeoutError\");\n            assert.equal(err.message, \"Timeout exceeded.\");\n            done();\n        });\n\n        this.clock.tick(2);\n\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", run);\n    });\n\n    it(\"runs a new Instance, waits until it is ready exceeding given timeout and checks last process output in error\", function(done) {\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", runWithConsoleOutput);\n\n        const instance = Process.create(\"node Test.js\", \"TestString\");\n\n        instance.ready(3).then(function() {\n            done(new Error(\"Promise shouldn't get resolved\"));\n        }).catch(function(err) {\n            assert(TimeoutError.is(err), \"Error is not an instance of TimeoutError\");\n            assert.equal(err.message, \"Timeout exceeded. Last process output is: Bar\");\n            done();\n        });\n\n        this.clock.tick(2);\n\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", run);\n    });\n\n    it(\"runs a new Instance and waits until death\", function(done) {\n        test.set({\n            resolve: {\n                data: \"TestString\"\n            }\n        });\n\n        const instance = Process.create(\"node Test.js\", \"TestString\");\n\n        instance.death().then(function(data) {\n            assert.deepStrictEqual(data, { data: \"TestString\" }, `TestString should be resolved: \\n ${JSON.stringify(data)}`);\n            done();\n        }).catch(done);\n\n        this.clock.tick(3);\n    });\n\n    it(\"runs a new Instance and waits until death exceeding given timeout\", function(done) {\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", runTimingout);\n\n        const instance = Process.create(\"node Test.js\", \"TestString\");\n\n        instance.death(1).then(function() {\n            done(new Error(\"Promise shouldn't get resolved.\"));\n        }).catch(function(err) {\n            assert(TimeoutError.is(err), \"Error is not an instance of TimeoutError\");\n            assert.equal(err.message, \"Timeout exceeded.\");\n            done();\n        });\n\n        this.clock.tick(2);\n\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", run);\n    });\n\n    it(\"runs a new Instance, waits until death exceeding given timeout and checks last process output in error\", function(done) {\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", runWithConsoleOutput);\n\n        const instance = Process.create(\"node Test.js\", \"TestString\");\n\n        instance.death(1).then(function() {\n            done(new Error(\"Promise shouldn't get resolved.\"));\n        }).catch(function(err) {\n            assert(TimeoutError.is(err), \"Error is not an instance of TimeoutError\");\n            assert.equal(err.message, \"Timeout exceeded. Last process output is: Bar\");\n            done();\n        });\n\n        this.clock.tick(2);\n\n        restoreAndSet(NodeProcess.prototype.run, NodeProcess.prototype, \"run\", run);\n    });\n\n    it(\"runs a new Instance and returns a stream\", function() { // eslint-disable-line\n        test.set({ resolve: \"TestString\" });\n\n        const process   = Process.create(\"node Test.js\", \"TestString\");\n        const stream    = process.stream();\n        const pipeSpy   = sinon.spy();\n        const streamSpy = new Writable({ // eslint-disable-line\n            \"write\": (data, enc, next) => {\n                pipeSpy(data);\n                next();\n            }\n        });\n\n        stream.pipe(streamSpy);\n        stream.write(\"Test\");\n\n        assert(test.spies().stdin.calledWith(new Buffer(\"Test\")), `stdinSpy was called with wrong args: \\n ${test.spies().stdin.lastCall.args}`);\n\n        process.instance.emitter.emit(\"data\", \"Test2\");\n        assert(pipeSpy.calledWith(new Buffer(\"Test2\")), `pipeSpy was called with wrong args: \\n ${pipeSpy.lastCall.args}`);\n\n        assert.throws(process.stream, \"It should only run one instance\");\n    });\n});\n"
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "test",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~test",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "write",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~write",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "run",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~run",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "runTimingout",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~runTimingout",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "runWithConsoleOutput",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~runWithConsoleOutput",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "onReady",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~onReady",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "resolve",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "onDeath",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~onDeath",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "deferred",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "kill",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~kill",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "reason",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "restoreAndSet",
    "memberof": "src/__tests__/ProcessTest.js",
    "longname": "src/__tests__/ProcessTest.js~restoreAndSet",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/ProcessTest.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "toRestore",
        "types": [
          "*"
        ]
      },
      {
        "name": "toSet",
        "types": [
          "*"
        ]
      },
      {
        "name": "functionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "stubFunction",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/ResultTest.js",
    "memberof": null,
    "longname": "src/__tests__/ResultTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport Result from \"../Result\";\nimport assert from \"assert\";\n\ndescribe(\"Result\", function() {\n    it(\"creates a new Result\", function() {\n        const result1 = Result.create(null);\n        const result2 = Result.create(\"test\");\n\n        assert.deepStrictEqual(result1, Result({ data: null }), \"Result should handle null-input\");\n        assert.deepStrictEqual(result2, Result({ data: \"test\" }), \"Result should handle string-input\");\n        assert.throws(Result.create.bind(null, [\"test\"]), TypeError, \"Result should only handle string || null\");\n    });\n});\n"
  },
  {
    "__docId__": 67,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/Scripts/CounterScript.js",
    "memberof": null,
    "longname": "src/__tests__/Scripts/CounterScript.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nclass Increment {\n    static create() {\n        return new Increment();\n    }\n\n    constructor() {\n        this.counter  = 0;\n        this.interval = setInterval(::this.increase, 1);\n    }\n\n    /**\n     * Increases the counter by 1\n     *\n     * @return {Nil}\n     */\n    increase() {\n        this.counter = this.counter + 1;\n\n        console.log(`Log No. ${this.counter}`);\n        return this.counter > 39 ? clearInterval(this.interval) : null;\n    }\n}\n\nIncrement.create();\n"
  },
  {
    "__docId__": 68,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Increment",
    "memberof": "src/__tests__/Scripts/CounterScript.js",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/Scripts/CounterScript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "src/__tests__/Scripts/CounterScript.js~Increment",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment.create",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/__tests__/Scripts/CounterScript.js~Increment",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment#constructor",
    "access": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 71,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "counter",
    "memberof": "src/__tests__/Scripts/CounterScript.js~Increment",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment#counter",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "interval",
    "memberof": "src/__tests__/Scripts/CounterScript.js~Increment",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment#interval",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "increase",
    "memberof": "src/__tests__/Scripts/CounterScript.js~Increment",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment#increase",
    "access": null,
    "description": "Increases the counter by 1",
    "lineNumber": 34,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Nil"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 74,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "counter",
    "memberof": "src/__tests__/Scripts/CounterScript.js~Increment",
    "longname": "src/__tests__/Scripts/CounterScript.js~Increment#counter",
    "access": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/Scripts/ExitCodeScript.js",
    "memberof": null,
    "longname": "src/__tests__/Scripts/ExitCodeScript.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n const exit = function() {\n     process.stdout.write(\"Process exited with code 100\");\n     process.exit(128);\n };\n\n setTimeout(exit, 5);\n"
  },
  {
    "__docId__": 76,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "exit",
    "memberof": "src/__tests__/Scripts/ExitCodeScript.js",
    "longname": "src/__tests__/Scripts/ExitCodeScript.js~exit",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/Scripts/ExitCodeScript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 77,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/Scripts/Failscript.js",
    "memberof": null,
    "longname": "src/__tests__/Scripts/Failscript.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nconst fails = function() {\n    throw new Error(\"Process failed\");\n};\n\nsetTimeout(fails, 5);\n"
  },
  {
    "__docId__": 78,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fails",
    "memberof": "src/__tests__/Scripts/Failscript.js",
    "longname": "src/__tests__/Scripts/Failscript.js~fails",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/Scripts/Failscript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/Scripts/KillScript.js",
    "memberof": null,
    "longname": "src/__tests__/Scripts/KillScript.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nconst live = function live() {\n    process.stdout.write(\"Kill me\");\n    process.on(\"exit\", () => process.exit(137));\n};\n\nsetTimeout(live, 5);\n"
  },
  {
    "__docId__": 80,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "live",
    "memberof": "src/__tests__/Scripts/KillScript.js",
    "longname": "src/__tests__/Scripts/KillScript.js~live",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/__tests__/Scripts/KillScript.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 81,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/Scripts/StdinLogger.js",
    "memberof": null,
    "longname": "src/__tests__/Scripts/StdinLogger.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nprocess.stdin.resume();\nprocess.stdin.on(\"data\", function(data) {\n    console.log(Buffer.isBuffer(data) ? data.toString() : data);\n});\n"
  },
  {
    "__docId__": 82,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/TimeoutErrorTest.js",
    "memberof": null,
    "longname": "src/__tests__/TimeoutErrorTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport TimeoutError from \"../TimeoutError\";\nimport assert from \"assert\";\n\ndescribe(\"TimeoutError\", function() {\n    it(\"creates a new TimeoutError without a null argument\", function(done) {\n        /* eslint-disable */\n        try {\n        /* eslint-ensable */\n            throw TimeoutError.create(null);\n            done(new Error(\"TimeoutError should have been caught\"));\n        } catch(err) {\n            assert.equal(\"Timeout exceeded.\", err.message);\n            done();\n        }\n    });\n\n    it(\"creates a new TimeoutError with a non null argument\", function(done) {\n        /* eslint-disable */\n        try {\n        /* eslint-enable */\n            throw TimeoutError.create(\"Foobar\");\n            done(new Error(\"Error should have been caught\"));\n        } catch(err) {\n            assert.equal(\"Timeout exceeded. Last process output is: Foobar\", err.message);\n            done();\n        }\n    });\n\n    it(\"creates a new TimeoutError with a non null but empty argument\", function(done) {\n        /* eslint-disable */\n        try {\n        /* eslint-enable */\n            throw TimeoutError.create(\"\");\n            done(new Error(\"Error should have been caught\"));\n        } catch(err) {\n            assert.equal(\"Timeout exceeded.\", err.message);\n            done();\n        }\n    });\n});\n"
  },
  {
    "__docId__": 83,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/__tests__/ValidatorTest.js",
    "memberof": null,
    "longname": "src/__tests__/ValidatorTest.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport Validator from \"../Validator\";\nimport assert from \"assert\";\nimport Result from \"../Result.type\";\n\ndescribe(\"Validator\", function() {\n    it(\"creates a new Validator out of a String\", function() {\n        const filter = Validator.create(\"match me\");\n        const data   = \"Check If This match me\";\n\n        assert(filter.validate(\"Check If This match me\"), \"Should match String\");\n        assert.deepStrictEqual(filter.getResult(data), Result({ data: null }), \"Should be equal to input\");\n        assert(!filter.validate(\"This shouldnt match.\"), \"Shouldn't match String\");\n    });\n\n    it(\"creates a new Validator out of a RegExp\", function() {\n        const filter   = Validator.create(/(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?/);\n\n        assert(filter.validate(\"New URL: http://www.google.de\"), \"Should return true\");\n        assert.deepStrictEqual(filter.getResult(\"New URL: http://www.google.de\"), Result({ data: \"http://www.google.de\" }), \"Should match Url\");\n        assert(!filter.validate(\"Numbers like 1,2,3 are not allowed.\"), \"Shouldn't match String\");\n    });\n\n    it(\"creates a new Validator out of a Function\", function() {\n        const search = value => value === \"search\";\n        const filter = Validator.create(search);\n\n        assert(filter.validate(\"search\"), \"Should match given String\");\n        assert.deepStrictEqual(filter.getResult(\"search me or not\"), Result({ data: null }), \"Should return input\");\n        assert(!filter.validate(\"Numbers like 1,2,3 are not allowed.\"), \"Shouldn't match String\");\n    });\n\n    it(\"throws an Error, if wrong condition is given\", function() {\n        assert.throws(Validator.create.bind(null, {}), TypeError);\n        assert.throws(Validator.create.bind(null, []), TypeError);\n    });\n});\n"
  },
  {
    "__docId__": 84,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/examples/Resources/Websocket.js",
    "memberof": null,
    "longname": "src/examples/Resources/Websocket.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\nimport http from \"http\";\n\n/**\n * First a http-Server is needed\n */\nconst server = http.createServer(function(req, res) {\n    console.log(\"Got request\");\n    res.writeHead(200, { \"Content-Type\": \"text/plain\" });\n    res.end(\"Okay\");\n});\n\n/**\n * Upgrades to Websocket\n */\nserver.on(\"upgrade\", function(req, socket) {\n    const handshake = \"HTTP/1.1 101 Web Socket Protocol Handshake\\r\\n\" +\n        \"Upgrade: WebSocket\\r\\n\" +\n        \"Connection: Upgrade\\r\\n\" +\n        \"\\r\\n\";\n\n    socket.write(handshake);\n    socket.on(\"end\", function() {\n        console.log(\"Closing Server\");\n        server.close();\n    });\n});\n\n/*\n * Starts the Http Server listening on localhost:1337\n */\nserver.listen(1337, \"127.0.0.1\", function() {\n    console.log(\"Listening on 127.0.0.1:1337\");\n    const options = {\n        port:     1337,\n        hostname: \"127.0.0.1\",\n        headers:  {\n            Connection: \"Upgrade\",\n            Upgrade:    \"websocket\"\n        }\n    };\n    const req     = http.request(options);\n\n    req.end();\n\n    /**\n     * Upgrades Request to Websocket\n     */\n    req.on(\"upgrade\", function(res, socket) {\n        console.log(\"Request was upgraded successfully to new Websocket\");\n        socket.end();\n    });\n});\n"
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "server",
    "memberof": "src/examples/Resources/Websocket.js",
    "longname": "src/examples/Resources/Websocket.js~server",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/Resources/Websocket.js",
    "importStyle": null,
    "description": "First a http-Server is needed",
    "lineNumber": 24,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/examples/Resources/dummyfile.js",
    "memberof": null,
    "longname": "src/examples/Resources/dummyfile.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n// It does nothing, but getting copied by ../death.js\n\nconst firstArgument = \"My First String\";\n\nconsole.log(firstArgument);\n"
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "firstArgument",
    "memberof": "src/examples/Resources/dummyfile.js",
    "longname": "src/examples/Resources/dummyfile.js~firstArgument",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/Resources/dummyfile.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/examples/death.js",
    "memberof": null,
    "longname": "src/examples/death.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n/*\n * Runs a Script that increases a counter each millisecond and logs it\n * This example waits until Process is finished\n */\nimport path from \"path\";\nimport { process } from \"../index\";\n\nconst copyProcess   = process(`cp ${path.join(__dirname, \"Resources/dummyfile\")} ${path.join(__dirname, \"Resources/copiedDummyfile\")}`);\nconst removeProcess = process(`rm ${path.join(__dirname, \"Resources/copiedDummyfile\")}`);\nconst copyAndRemove = async function() {\n    /*eslint-disable*/\n    try {\n    /*eslint-enable*/\n        console.log(\"> Copy file: dummyfile\");\n        await copyProcess.death(500);\n        console.log(\"> Finished copy process: dummyfile -> copiedDummyfile\");\n\n        console.log(\"> Remove file: copiedDummyfile\");\n        await removeProcess.death(500);\n        console.log(\"> Finished remove process: copiedDummyfile -> -\");\n    } catch(err) {\n        console.log(\"Failed to copy or remove a single file: \\n\", err.message);\n    }\n};\n\ncopyAndRemove();\n"
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "copyProcess",
    "memberof": "src/examples/death.js",
    "longname": "src/examples/death.js~copyProcess",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/death.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "removeProcess",
    "memberof": "src/examples/death.js",
    "longname": "src/examples/death.js~removeProcess",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/death.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "copyAndRemove",
    "memberof": "src/examples/death.js",
    "longname": "src/examples/death.js~copyAndRemove",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/death.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/examples/ready.js",
    "memberof": null,
    "longname": "src/examples/ready.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n/*\n * Runs a Script that increases a counter each millisecond and logs it\n * This example waits until Process is ready\n */\nimport path from \"path\";\nimport { process } from \"../index\";\n\nconst websocketPath   = path.join(__dirname, \"Resources/Websocket\");\nconst websocket       = process(`node ${websocketPath}`, \"Request was upgraded successfully to new Websocket\");\nconst createWebsocket = async function() {\n    /* eslint-disable */\n    try {\n    /* eslint-enable */\n        console.log(\"> Creating a websocket\");\n        const result = await websocket.ready(1000);\n\n        /*\n         * If Promise gets resolved, a Result is returned containing ...\n         *\n         * condition === Regex                            --> { data: MatchedString }\n         * condition === String || condition === Function --> { data: null }\n         */\n        console.log(\"> Websocket is ready to use, returning the following result: \\n\", result);\n        console.log(\"> Shutdown process...\");\n\n        websocket.kill();\n    } catch(err) {\n        console.log(\"Failed to create Websocket\", err.message);\n        websocket.kill();\n    }\n};\n\ncreateWebsocket();\n"
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "websocketPath",
    "memberof": "src/examples/ready.js",
    "longname": "src/examples/ready.js~websocketPath",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/ready.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "websocket",
    "memberof": "src/examples/ready.js",
    "longname": "src/examples/ready.js~websocket",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/ready.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createWebsocket",
    "memberof": "src/examples/ready.js",
    "longname": "src/examples/ready.js~createWebsocket",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/ready.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/examples/stream.js",
    "memberof": null,
    "longname": "src/examples/stream.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n/*\n * Runs a Script that listens on stdin and logs it\n * This example will return a stream\n */\nimport path from \"path\";\nimport fs from \"fs\";\nimport { Writable } from \"stream\";\nimport { process } from \"../index\";\n\nconst dummyfile   = path.join(__dirname, \"Resources/dummyfile\");\nconst writeStream = new Writable();\nconst grep        = process(\"grep first\", \"\");\nconst stream      = grep.stream();\n\nwriteStream.write = function(output) {\n    console.log(\"> Found the following matches in file:\\n\", output.slice(0, -1));\n\n    console.log(\"> Closing..\");\n    grep.kill();\n};\n\nfs.createReadStream(dummyfile).pipe(stream).pipe(writeStream);\n"
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "dummyfile",
    "memberof": "src/examples/stream.js",
    "longname": "src/examples/stream.js~dummyfile",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/stream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "writeStream",
    "memberof": "src/examples/stream.js",
    "longname": "src/examples/stream.js~writeStream",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/stream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "stream~Writable"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "grep",
    "memberof": "src/examples/stream.js",
    "longname": "src/examples/stream.js~grep",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/stream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "stream",
    "memberof": "src/examples/stream.js",
    "longname": "src/examples/stream.js~stream",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/stream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "write",
    "memberof": "src/examples/stream.js",
    "longname": "src/examples/stream.js~write",
    "access": null,
    "export": false,
    "importPath": "core-worker/src/examples/stream.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "output",
        "types": [
          "*"
        ]
      }
    ],
    "generator": false
  },
  {
    "__docId__": 102,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "/*\n * This file is part of CoreWorker.\n *\n * CoreWorker is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * CoreWorker is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n * You should have received a copy of the GNU General Public License\n * along with CoreWorker.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Copyright 2016 TeeAge-Beatz UG (haftungsbeschr채nkt)\n */\n\n import TProcess from \"./Process\";\n\n export const process = ::TProcess.create;\n export const Process = TProcess;\n"
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "process",
    "memberof": "src/index.js",
    "longname": "src/index.js~process",
    "access": null,
    "export": true,
    "importPath": "core-worker/src/index.js",
    "importStyle": "{process}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "Process",
    "memberof": "src/index.js",
    "longname": "src/index.js~Process",
    "access": null,
    "export": true,
    "importPath": "core-worker/src/index.js",
    "importStyle": "{Process}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 113,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 122,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 123,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 124,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 125,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 126,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 127,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 128,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 129,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 130,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 131,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 132,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 133,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 134,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 135,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 136,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 137,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 138,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 139,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 140,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 141,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 142,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 143,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 144,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 145,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 146,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 147,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 148,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 149,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 150,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 151,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 152,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 154,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 155,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 156,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 157,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 158,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 159,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 160,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 161,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": "",
    "builtinExternal": true
  }
]